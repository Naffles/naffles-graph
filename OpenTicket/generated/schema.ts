// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class L2User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save L2User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type L2User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("L2User", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): L2User | null {
    return changetype<L2User | null>(
      store.get_in_block("L2User", id.toHexString())
    );
  }

  static load(id: Bytes): L2User | null {
    return changetype<L2User | null>(store.get("L2User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get naffles(): L2NaffleLoader {
    return new L2NaffleLoader(
      "L2User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "naffles"
    );
  }
}

export class Collection extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Collection must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Collection", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Collection | null {
    return changetype<Collection | null>(
      store.get_in_block("Collection", id.toHexString())
    );
  }

  static load(id: Bytes): Collection | null {
    return changetype<Collection | null>(
      store.get("Collection", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get naffles(): L2NaffleLoader {
    return new L2NaffleLoader(
      "Collection",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "naffles"
    );
  }
}

export class L2Naffle extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save L2Naffle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type L2Naffle must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("L2Naffle", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): L2Naffle | null {
    return changetype<L2Naffle | null>(
      store.get_in_block("L2Naffle", id.toHexString())
    );
  }

  static load(id: Bytes): L2Naffle | null {
    return changetype<L2Naffle | null>(store.get("L2Naffle", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collection(): Bytes | null {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collection(value: Bytes | null) {
    if (!value) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromBytes(<Bytes>value));
    }
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get winningTicketId(): BigInt | null {
    let value = this.get("winningTicketId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set winningTicketId(value: BigInt | null) {
    if (!value) {
      this.unset("winningTicketId");
    } else {
      this.set("winningTicketId", Value.fromBigInt(<BigInt>value));
    }
  }

  get naffleIdOnContract(): BigInt | null {
    let value = this.get("naffleIdOnContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set naffleIdOnContract(value: BigInt | null) {
    if (!value) {
      this.unset("naffleIdOnContract");
    } else {
      this.set("naffleIdOnContract", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftId(): BigInt | null {
    let value = this.get("nftId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftId(value: BigInt | null) {
    if (!value) {
      this.unset("nftId");
    } else {
      this.set("nftId", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxTickets(): BigInt | null {
    let value = this.get("maxTickets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxTickets(value: BigInt | null) {
    if (!value) {
      this.unset("maxTickets");
    } else {
      this.set("maxTickets", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxOpenEntryTickets(): BigInt | null {
    let value = this.get("maxOpenEntryTickets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxOpenEntryTickets(value: BigInt | null) {
    if (!value) {
      this.unset("maxOpenEntryTickets");
    } else {
      this.set("maxOpenEntryTickets", Value.fromBigInt(<BigInt>value));
    }
  }

  get ticketPriceInWei(): BigInt | null {
    let value = this.get("ticketPriceInWei");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketPriceInWei(value: BigInt | null) {
    if (!value) {
      this.unset("ticketPriceInWei");
    } else {
      this.set("ticketPriceInWei", Value.fromBigInt(<BigInt>value));
    }
  }

  get endDate(): BigInt {
    let value = this.get("endDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endDate(value: BigInt) {
    this.set("endDate", Value.fromBigInt(value));
  }

  get canceledOnL1MessageHash(): Bytes | null {
    let value = this.get("canceledOnL1MessageHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set canceledOnL1MessageHash(value: Bytes | null) {
    if (!value) {
      this.unset("canceledOnL1MessageHash");
    } else {
      this.set("canceledOnL1MessageHash", Value.fromBytes(<Bytes>value));
    }
  }

  get canceledOnL2TransactionHash(): Bytes | null {
    let value = this.get("canceledOnL2TransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set canceledOnL2TransactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("canceledOnL2TransactionHash");
    } else {
      this.set("canceledOnL2TransactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get winnerSetOnL1MessageHash(): Bytes | null {
    let value = this.get("winnerSetOnL1MessageHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set winnerSetOnL1MessageHash(value: Bytes | null) {
    if (!value) {
      this.unset("winnerSetOnL1MessageHash");
    } else {
      this.set("winnerSetOnL1MessageHash", Value.fromBytes(<Bytes>value));
    }
  }

  get winnerSetOnL2TransactionHash(): Bytes | null {
    let value = this.get("winnerSetOnL2TransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set winnerSetOnL2TransactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("winnerSetOnL2TransactionHash");
    } else {
      this.set("winnerSetOnL2TransactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get winnerAddress(): Bytes | null {
    let value = this.get("winnerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set winnerAddress(value: Bytes | null) {
    if (!value) {
      this.unset("winnerAddress");
    } else {
      this.set("winnerAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get naffleStatus(): string | null {
    let value = this.get("naffleStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set naffleStatus(value: string | null) {
    if (!value) {
      this.unset("naffleStatus");
    } else {
      this.set("naffleStatus", Value.fromString(<string>value));
    }
  }

  get type(): i32 {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set type(value: i32) {
    this.set("type", Value.fromI32(value));
  }
}

export class TicketActivity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TicketActivity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TicketActivity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TicketActivity", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TicketActivity | null {
    return changetype<TicketActivity | null>(
      store.get_in_block("TicketActivity", id.toHexString())
    );
  }

  static load(id: Bytes): TicketActivity | null {
    return changetype<TicketActivity | null>(
      store.get("TicketActivity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get paidTicket(): Bytes | null {
    let value = this.get("paidTicket");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set paidTicket(value: Bytes | null) {
    if (!value) {
      this.unset("paidTicket");
    } else {
      this.set("paidTicket", Value.fromBytes(<Bytes>value));
    }
  }

  get openEntryTicket(): Bytes | null {
    let value = this.get("openEntryTicket");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set openEntryTicket(value: Bytes | null) {
    if (!value) {
      this.unset("openEntryTicket");
    } else {
      this.set("openEntryTicket", Value.fromBytes(<Bytes>value));
    }
  }

  get naffle(): Bytes | null {
    let value = this.get("naffle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set naffle(value: Bytes | null) {
    if (!value) {
      this.unset("naffle");
    } else {
      this.set("naffle", Value.fromBytes(<Bytes>value));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class PaidTicket extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PaidTicket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PaidTicket must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PaidTicket", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PaidTicket | null {
    return changetype<PaidTicket | null>(
      store.get_in_block("PaidTicket", id.toHexString())
    );
  }

  static load(id: Bytes): PaidTicket | null {
    return changetype<PaidTicket | null>(
      store.get("PaidTicket", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get naffle(): Bytes | null {
    let value = this.get("naffle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set naffle(value: Bytes | null) {
    if (!value) {
      this.unset("naffle");
    } else {
      this.set("naffle", Value.fromBytes(<Bytes>value));
    }
  }

  get ticketIdOnContract(): BigInt | null {
    let value = this.get("ticketIdOnContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketIdOnContract(value: BigInt | null) {
    if (!value) {
      this.unset("ticketIdOnContract");
    } else {
      this.set("ticketIdOnContract", Value.fromBigInt(<BigInt>value));
    }
  }

  get ticketIdOnNaffle(): Array<BigInt> {
    let value = this.get("ticketIdOnNaffle");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set ticketIdOnNaffle(value: Array<BigInt>) {
    this.set("ticketIdOnNaffle", Value.fromBigIntArray(value));
  }

  get activities(): TicketActivityLoader {
    return new TicketActivityLoader(
      "PaidTicket",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "activities"
    );
  }
}

export class OpenEntryTicket extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OpenEntryTicket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OpenEntryTicket must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OpenEntryTicket", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OpenEntryTicket | null {
    return changetype<OpenEntryTicket | null>(
      store.get_in_block("OpenEntryTicket", id.toHexString())
    );
  }

  static load(id: Bytes): OpenEntryTicket | null {
    return changetype<OpenEntryTicket | null>(
      store.get("OpenEntryTicket", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get naffleId(): BigInt | null {
    let value = this.get("naffleId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set naffleId(value: BigInt | null) {
    if (!value) {
      this.unset("naffleId");
    } else {
      this.set("naffleId", Value.fromBigInt(<BigInt>value));
    }
  }

  get ticketIdOnContract(): BigInt | null {
    let value = this.get("ticketIdOnContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketIdOnContract(value: BigInt | null) {
    if (!value) {
      this.unset("ticketIdOnContract");
    } else {
      this.set("ticketIdOnContract", Value.fromBigInt(<BigInt>value));
    }
  }

  get ticketIdOnNaffle(): Array<BigInt> | null {
    let value = this.get("ticketIdOnNaffle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set ticketIdOnNaffle(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("ticketIdOnNaffle");
    } else {
      this.set("ticketIdOnNaffle", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get activities(): TicketActivityLoader {
    return new TicketActivityLoader(
      "OpenEntryTicket",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "activities"
    );
  }

  get naffle(): Bytes | null {
    let value = this.get("naffle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set naffle(value: Bytes | null) {
    if (!value) {
      this.unset("naffle");
    } else {
      this.set("naffle", Value.fromBytes(<Bytes>value));
    }
  }
}

export class L2NaffleLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): L2Naffle[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<L2Naffle[]>(value);
  }
}

export class TicketActivityLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TicketActivity[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TicketActivity[]>(value);
  }
}
