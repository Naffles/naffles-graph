// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UserStaked extends ethereum.Event {
  get params(): UserStaked__Params {
    return new UserStaked__Params(this);
  }
}

export class UserStaked__Params {
  _event: UserStaked;

  constructor(event: UserStaked) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get stakeTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stakingPeriod(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class UserUnstaked extends ethereum.Event {
  get params(): UserUnstaked__Params {
    return new UserUnstaked__Params(this);
  }
}

export class UserUnstaked__Params {
  _event: UserUnstaked;

  constructor(event: UserUnstaked) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get unstakeTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FoundersKeyStaking__getBestStakedNFTInfoResult {
  value0: i32;
  value1: i32;
  value2: BigInt;

  constructor(value0: i32, value1: i32, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): i32 {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class FoundersKeyStaking__getStakedInfoForNFTIdResultValue0Struct extends ethereum.Tuple {
  get nftId(): i32 {
    return this[0].toI32();
  }

  get stakedSince(): BigInt {
    return this[1].toBigInt();
  }

  get stakingPeriod(): i32 {
    return this[2].toI32();
  }
}

export class FoundersKeyStaking__getStakedNFTInfosResultValue0Struct extends ethereum.Tuple {
  get nftId(): i32 {
    return this[0].toI32();
  }

  get stakedSince(): BigInt {
    return this[1].toBigInt();
  }

  get stakingPeriod(): i32 {
    return this[2].toI32();
  }
}

export class FoundersKeyStaking__userStakeInfoResult {
  value0: i32;
  value1: BigInt;
  value2: i32;

  constructor(value0: i32, value1: BigInt, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }

  getNftId(): i32 {
    return this.value0;
  }

  getStakedSince(): BigInt {
    return this.value1;
  }

  getStakingPeriod(): i32 {
    return this.value2;
  }
}

export class FoundersKeyStaking extends ethereum.SmartContract {
  static bind(address: Address): FoundersKeyStaking {
    return new FoundersKeyStaking("FoundersKeyStaking", address);
  }

  FoundersKeyAddress(): Address {
    let result = super.call(
      "FoundersKeyAddress",
      "FoundersKeyAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_FoundersKeyAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "FoundersKeyAddress",
      "FoundersKeyAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ONE_MONTH(): BigInt {
    let result = super.call("ONE_MONTH", "ONE_MONTH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE_MONTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ONE_MONTH", "ONE_MONTH():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SIX_MONTHS(): BigInt {
    let result = super.call("SIX_MONTHS", "SIX_MONTHS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SIX_MONTHS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("SIX_MONTHS", "SIX_MONTHS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SoulboundFoundersKeyAddress(): Address {
    let result = super.call(
      "SoulboundFoundersKeyAddress",
      "SoulboundFoundersKeyAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_SoulboundFoundersKeyAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "SoulboundFoundersKeyAddress",
      "SoulboundFoundersKeyAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  THREE_MONTHS(): BigInt {
    let result = super.call("THREE_MONTHS", "THREE_MONTHS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_THREE_MONTHS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("THREE_MONTHS", "THREE_MONTHS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TWELVE_MONTHS(): BigInt {
    let result = super.call("TWELVE_MONTHS", "TWELVE_MONTHS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TWELVE_MONTHS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TWELVE_MONTHS",
      "TWELVE_MONTHS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBestStakedNFTInfo(
    _userAddress: Address
  ): FoundersKeyStaking__getBestStakedNFTInfoResult {
    let result = super.call(
      "getBestStakedNFTInfo",
      "getBestStakedNFTInfo(address):(uint8,uint16,uint256)",
      [ethereum.Value.fromAddress(_userAddress)]
    );

    return new FoundersKeyStaking__getBestStakedNFTInfoResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toBigInt()
    );
  }

  try_getBestStakedNFTInfo(
    _userAddress: Address
  ): ethereum.CallResult<FoundersKeyStaking__getBestStakedNFTInfoResult> {
    let result = super.tryCall(
      "getBestStakedNFTInfo",
      "getBestStakedNFTInfo(address):(uint8,uint16,uint256)",
      [ethereum.Value.fromAddress(_userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FoundersKeyStaking__getBestStakedNFTInfoResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toBigInt()
      )
    );
  }

  getStakedInfoForNFTId(
    _userAddress: Address,
    _nftId: i32
  ): FoundersKeyStaking__getStakedInfoForNFTIdResultValue0Struct {
    let result = super.call(
      "getStakedInfoForNFTId",
      "getStakedInfoForNFTId(address,uint16):((uint16,uint256,uint8))",
      [
        ethereum.Value.fromAddress(_userAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_nftId))
      ]
    );

    return changetype<
      FoundersKeyStaking__getStakedInfoForNFTIdResultValue0Struct
    >(result[0].toTuple());
  }

  try_getStakedInfoForNFTId(
    _userAddress: Address,
    _nftId: i32
  ): ethereum.CallResult<
    FoundersKeyStaking__getStakedInfoForNFTIdResultValue0Struct
  > {
    let result = super.tryCall(
      "getStakedInfoForNFTId",
      "getStakedInfoForNFTId(address,uint16):((uint16,uint256,uint8))",
      [
        ethereum.Value.fromAddress(_userAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_nftId))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<FoundersKeyStaking__getStakedInfoForNFTIdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getStakedNFTInfos(
    _userAddress: Address
  ): Array<FoundersKeyStaking__getStakedNFTInfosResultValue0Struct> {
    let result = super.call(
      "getStakedNFTInfos",
      "getStakedNFTInfos(address):((uint16,uint256,uint8)[])",
      [ethereum.Value.fromAddress(_userAddress)]
    );

    return result[0].toTupleArray<
      FoundersKeyStaking__getStakedNFTInfosResultValue0Struct
    >();
  }

  try_getStakedNFTInfos(
    _userAddress: Address
  ): ethereum.CallResult<
    Array<FoundersKeyStaking__getStakedNFTInfosResultValue0Struct>
  > {
    let result = super.tryCall(
      "getStakedNFTInfos",
      "getStakedNFTInfos(address):((uint16,uint256,uint8)[])",
      [ethereum.Value.fromAddress(_userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        FoundersKeyStaking__getStakedNFTInfosResultValue0Struct
      >()
    );
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userStakeInfo(
    param0: Address,
    param1: BigInt
  ): FoundersKeyStaking__userStakeInfoResult {
    let result = super.call(
      "userStakeInfo",
      "userStakeInfo(address,uint256):(uint16,uint256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new FoundersKeyStaking__userStakeInfoResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toI32()
    );
  }

  try_userStakeInfo(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<FoundersKeyStaking__userStakeInfoResult> {
    let result = super.tryCall(
      "userStakeInfo",
      "userStakeInfo(address,uint256):(uint16,uint256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FoundersKeyStaking__userStakeInfoResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toI32()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _foundersKeyAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _soulboundFoundersKeyAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFoundersKeyAddressCall extends ethereum.Call {
  get inputs(): SetFoundersKeyAddressCall__Inputs {
    return new SetFoundersKeyAddressCall__Inputs(this);
  }

  get outputs(): SetFoundersKeyAddressCall__Outputs {
    return new SetFoundersKeyAddressCall__Outputs(this);
  }
}

export class SetFoundersKeyAddressCall__Inputs {
  _call: SetFoundersKeyAddressCall;

  constructor(call: SetFoundersKeyAddressCall) {
    this._call = call;
  }

  get _foundersKeyAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFoundersKeyAddressCall__Outputs {
  _call: SetFoundersKeyAddressCall;

  constructor(call: SetFoundersKeyAddressCall) {
    this._call = call;
  }
}

export class SetSoulboundFoundersKeyAddressCall extends ethereum.Call {
  get inputs(): SetSoulboundFoundersKeyAddressCall__Inputs {
    return new SetSoulboundFoundersKeyAddressCall__Inputs(this);
  }

  get outputs(): SetSoulboundFoundersKeyAddressCall__Outputs {
    return new SetSoulboundFoundersKeyAddressCall__Outputs(this);
  }
}

export class SetSoulboundFoundersKeyAddressCall__Inputs {
  _call: SetSoulboundFoundersKeyAddressCall;

  constructor(call: SetSoulboundFoundersKeyAddressCall) {
    this._call = call;
  }

  get _soulboundFoundersKeyAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSoulboundFoundersKeyAddressCall__Outputs {
  _call: SetSoulboundFoundersKeyAddressCall;

  constructor(call: SetSoulboundFoundersKeyAddressCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _nftId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _stakingPeriod(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get _nftId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}
